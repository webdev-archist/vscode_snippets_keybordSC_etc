{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	//SERVEUR-SIDE
		"node server basic file": {
			"scope": "javascript",
			"prefix": ["nsbasic_file","node_server_basic_file"],
			"body": ["",
				"const http = require('http')",
				"//const app = require('./app')",
				"const server = http.createServer(/*app*/(req, res) => {",
					"res.end('Voilà la réponse du serveur !')",
				"})",
				"//node_server_normalizePort",
				"//app.set('port', port)",
				"//node_server_errorHandler",
				"//node_server_listeners",
				"",
				"server.listen(process.env.PORT || 3000)",
				"//server.listen(port)"
			],
			"description": "node server basic file"
		},
		"node server errorHandler": {
			"scope": "javascript",
			"prefix": ["nserror_handler","node_server_errorHandler"],
			"body": ["",
				"const errorHandler = error => {",
				"   if (error.syscall !== 'listen')throw error",
				"   const address = server.address(), bind = typeof address === 'string' ? 'pipe ' + address : 'port: ' + port",
				"   switch (error.code) {",
				"   case 'EACCES':console.error(bind + ' requires elevated privileges.');process.exit(1);break;",
				"   case 'EADDRINUSE':console.error(bind + ' is already in use.');process.exit(1);break;",
				"   default:throw error;",
				"   }",
				"}",
				""
			],
			"description": "node server errorHandler"
		},
		"node server normalizePort": {
			"scope": "javascript",
			"prefix": ["nsnormalizePort","node_server_normalizePort"],
			"body": ["",
				"const normalizePort = val => {",
				"   const port = parseInt(val, 10)",
				"   if (isNaN(port))return val",
				"   if (port >= 0)return port",
				"   return false",
				"}",
				"const port = normalizePort(process.env.PORT || '3000')",
				""
			],
			"description": "node server normalizePort"
		},
		"node server listeners error & _ing": {
			"scope": "javascript",
			"prefix": ["nslistener","node_server_listener"],
			"body": ["",
				"const server = http.createServer(/*app*/)",
				"server.on('error', errorHandler)",
				"server.on('listening', () => {",
				"   const address = server.address()",
				"   const bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + port",
				"   console.log('Listening on ' + bind)",
				"})",
				"server.listen(port)",
				""
			],
			"description": "node server listeners"
		},
		"node server file with snippets": {
			"scope": "javascript",
			"prefix": ["nsfile_with_snippets","node_server_file_with_snippets"],
			"body": ["",
				"const http = require('http')",
				"const app = require('./app')",
				"node_server_normalizePort",
				"node_server_errorHandler",
				"node_server_listeners",
				""
			],
			"description": "node server file with snippets"
		},
}