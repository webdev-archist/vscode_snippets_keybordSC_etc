{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
//REACT

	
	"react propTypes": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rgpt","react_proptypes"],
		"body": [
			"${1:Component}.propTypes = {",
			"    ${2:prop}: PropTypes.${3|string,number,array,object|}${4:.isRequired},",
			"}",
			"",
		],
		"description": "generate code for react proptypes to an component"
	},
	"react defaultProps": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rgdp","rgpd","react_defaultprops"],
		"body": [
			"${1:Component}.defaultProps = {",
			"    ${2:prop}: ${3:\"value of the property\"},",
			"}",
			"",
		],
		"description": "generate code for react defaultProps to an component"
	},
	"react generateStyledComponent": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rgsc","react_styledcomponents"],
		"body": [
			"const ${1:Component}Styled = styled.${2:span}`",
			"    ${3:property}: ${4:value};",
			"`",
			"",
		],
		"description": "generate code for react styled component(element)"
	},
	"react generateGlobalStyledComponent": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rgscg","react_globalstyledcomponents"],
		"body": [
			"const ${1:GlobalStyle} = createGlobalStyle`",
			"    ${2:div}{",
			"        ${3:property}: ${4:value};",
			"    }",
			"`",
			"",
		],
		"description": "generate code for react styled component(element)"
	},
	"react generateStyledComponent(custom)": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rgsc_","react_styledcomponentsCustom"],
		"body": [
			"const ${1:Component}Styled = styled(${2:span})`",
			"    ${3:property}: ${4:value};",
			"`",
			"",
		],
		"description": "generate code for react styled component(element)"
	},
//IMPORTS PACKAGES
	"react importsAll": {
		"scope": "typescript,javascriptreact",
		"prefix": ["ria","react_importall"],
		"body": [
			"import React, {useState,useEffect,useRef,useCallback,useMemo,useContext,useReducer,useImperativeHandle,useLayoutEffect,useDebugValue,useDeferredValue,useTransition,useId} from 'react'",
			"import ReactDOM from 'react-dom/client'",
			"import {BrowserRouter,HashRouter,Routes,Route,Link,NavLink,Prompt,Redirect,MemoryRouter,useParams,useHistory,useLocation,useRouteMatch} from 'react-router-dom'",
			"import PropTypes from 'prop-types'",
			"import styled from 'styled-components'",
			"<BrowserRouter",
			"\tbasename=\"/calendar\"",
			"\tforceRefresh={true}",
			"\tgetUserConfirmation={(message, callback) => {",
			"\t\t// this is the default behavior",
			"\t\tconst allowTransition = window.confirm(message);",
			"\t\tcallback(allowTransition);",
			"\t}}",
			"\tkeyLength={12}",
			">",
			"\t<HashRouter",
			"\t\tbasename=\"/calendar_\"",
			"\t\tgetUserConfirmation={(message, callback) => {",
			"\t\t\t// this is the default behavior",
			"\t\t\tconst allowTransition = window.confirm(message);",
			"\t\t\tcallback(allowTransition);",
			"\t\t}}",
			"\t\thashType={\"slash\" || \"noslash\" || \"hashbang\"}",
			"\t>",
			"\t\t<Link  {/*renders <a href=\"/calendar/today\">*/}",
			"\t\t\tto=\"/today\"", 
			"\t\t\tcomponent={FancyLink}", 
			"\t\t\tinnerRef={anchorRef}\t{/* As of React Router 5.1, if you are using React 16 you should not need this prop because we forward the ref to the underlying <a>. Use a normal ref instead. */}", 
			"\t\t\tinnerRef={node => {/* `node` refers to the mounted DOM element, or null when unmounted */}}}\t{/* As of React Router 5.1, if you are using React 16 you should not need this prop because we forward the ref to the underlying <a>. Use a normal ref instead. */}", 
			"\t\t\tto={{pathname: \"/courses\",search: \"?sort=name\",hash: \"#the-hash\",state: { fromDashboard: true }}}\t{/* function */}",
			"\t\t\tto={location => ({ ...location, pathname: \"/courses\" })}\t{/* function */}",
			"\t\t\tto={location => `${location.pathname}?sort=name`}\t{/* function */}",
			"\t\treplace\t{/* When true, clicking the link will replace the current entry in the history stack instead of adding a new one. */}",
			"\t\t{...others}\t{/*You can also pass props youâ€™d like to be on the <a> such as a title, id, className, etc.*/}/>",
			"\t</HashRouter>",
			"</BrowserRouter>",
			"",
		],
		"description": "import react most used packages"
	},
	"react importsBase": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rid","react_importbase","react_importdefaults"],
		"body": [
			"import React from 'react'",
			"import ReactDOM from 'react-dom/client'",
			"",
		],
		"description": "import react base/default packages"
	},
	"react importStyledComponents": {
		"scope": "typescript,javascriptreact",
		"prefix": ["ris","react_stylecomponents"],
		"body": [
			"import styled from 'styled-components'",
			"",
		],
		"description": "import react styled-components packages"
	},
	"react importStyledComponents and global": {
		"scope": "typescript,javascriptreact",
		"prefix": ["ris_","react_stylecomponents_and_global"],
		"body": [
			"import styled,{createGlobalStyle} from 'styled-components'",
			"",
		],
		"description": "import react styled-components packages"
	},
	"react importRouter": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rir","react_router"],
		"body": [
			"import {BrowserRouter,Routes,Route,Link,useParams} from 'react-router-dom'",
			"",
		],
		"description": "import react react-router-dom packages"
	},
	"react importPropTypes": {
		"scope": "typescript,javascriptreact",
		"prefix": ["rip","react_proptypes"],
		"body": [
			"import PropTypes from 'prop-types'",
			"",
		],
		"description": "import react propTypes packages"
	},
}