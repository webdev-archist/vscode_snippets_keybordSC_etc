{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }




//https://code.visualstudio.com/docs/editor/userdefinedsnippets#_variables
	
	
	
/*
//JAVASCRIPT
	//LIST OF KEYWORDS
				"liste des mot-clés": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["afr","arrow_function_returning"],
					"body": [
						"//af##: pour arrow functions",
						"//rg##: pour react generate",
						"//ri##: pour react imports",
						"//ns##: pour node server",
						"//ne##: pour node express",
					],
					"description": "liste du début des mot-clés(sigles,initiales) permettants de générer des snippet"
				},
	//VANILLA
		//ARROW FONCTIONS
				"arrow fonction returning (basic)": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["afr","arrow_function_returning"],
					"body": [
						"(${1:props}) => ${2:console.log(${3:\"to log\"})}",
					],
					"description": "generate a basic returning arrow function "
				},
				"arrow fonction returning (basic 2)": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["afr_","arrow_function_returning_multiline"],
					"body": [
						"(${1:props}) => ",
						"    ${2:console.log(${3:\"to log\"})}",
						""
					],
					"description": "generate a basic returning arrow function "
				},
				"arrow fonction returning object": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["afro","arrow_function_returning_object"],
					"body": [
						"(${1:props}) => ({",
						"    ${2:console.log(${3:\"to log\"})}",
						" })",
						"",
					],
					"description": "generate an object returning arrow function "
				},
				"arrow fonction": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["af","arrow_function"],
					"body": [
						"(${1:props}) => {",
						"    ${2:console.log(${3:\"to log\"})}",
						"}",
						"",
					],
					"description": "generate an basic arrow function "
				},
				"arrow fonction variable": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["afv","arrow_function_variable"],
					"body": [
						"${1|const,let,var|} ${2:name} = (${3:props}) => {",
						"    ${4:console.log(${5:\"to log\"})}",
						"}",
						"",
					],
					"description": "generate an basic arrow function variiable"
				},
				"arrow fonction variable returning(basic one line)": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["afvo","arrow_function_variable_returning_oneline"],
					"body": [
						"${1|const,let,var|} ${2:name} = (${3:props}) => {${4:console.log(${5:\"to log\"})}}",
						"",
					],
					"description": "generate an basic variable returning arrow function variiable"
				},
				"arrow fonction variable returning(basic one line)": {
					"scope": "javascript,typescript,javascriptreact",
					"prefix": ["afvo_","arrow_function_variable_returning_oneline"],
					"body": [
						"(${3:props}) => {${4:console.log(${5:\"to log\"})}}",
						"",
					],
					"description": "generate an basic variable returning arrow function variiable"
				},
*/

}