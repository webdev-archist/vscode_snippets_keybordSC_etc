{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// "scope": ["js","jsx","tsx"],
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
/*
PREDEFINED FUNCTIONS
*/
	"Predefined functions list": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafSUPER"],
		"body": [
		"${1|eval,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,escape,unescape|}(${2:$TM_SELECTED_TEXT})"
		],
		"description": "Predefined functions list"
	},
	"(?)Predefined functions list definition": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafSUPER"],
		"body": [
		"URL (MDN): https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#predefined_functions"
		, "eval: The eval() method evaluates JavaScript code represented as a string."
		, "isFinite: The global isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number."
		, "isNaN: The isNaN() function determines whether a value is NaN or not. Note: coercion inside the isNaN function has interesting rules; you may alternatively want to use Number.isNaN() to determine if the value is Not-A-Number."
		, "parseFloat: The parseFloat() function parses a string argument and returns a floating point number."
		, "parseInt: The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems)."
		, "decodeURI: The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI or by a similar routine."
		, "decodeURIComponent: The decodeURIComponent() method decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent or by a similar routine."
		, "encodeURI: The encodeURI() method encodes a Uniform Resource Identifier (URI) by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
		, "encodeURIComponent: The encodeURIComponent() method encodes a Uniform Resource Identifier (URI) component by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters)."
		, "escape: The deprecated escape() method computes a new string in which certain characters have been replaced by a hexadecimal escape sequence. Use encodeURI or encodeURIComponent instead."
		, "unescape: The deprecated unescape() method computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like escape. Because unescape() is deprecated, use decodeURI() or decodeURIComponent instead."
		],
		"description": "Predefined functions list"
	},


/*FUNCTIONS*/
/*
	Function expressions ("Anonymous function")
	Named function
	Inner function (into an "outer function")
	Recursive function
	IIFE ("Immediately Invoked Function Expressions": Function expressions, named or anonymous)
	Function Object
	Arrow function
*/
/*ARROW FUNCTIONS*/
//SHOW SHORTCUTS "="
	"=SHOW ARROW-EXPRESSION FUNCTIONS ALL SHORTCUTS & DESCRIPTIONS": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["=functions"],
		"body": [
			"/*",
			"ctrl+alt+f : RACCOURCI PRINCIPAL POUR LES ARROW-EXPRESSION FUNCTIONS",
			"RACCOURCI PRINCIPAUX: 1°)'aaf...'/'af...', 2°)'afn...'/'fn...', 3°)'nf...'", 
			"1°)(anonyme) arrow functions, 2°) (anonyme) function expressions, 3°) named functions", 
			"",
			"// RETURNINGS", 
			"space [aafSUPER]: 1-LINE Anonyme Arrow Function Super",
			"shift+space [aafuSUPER]: 1-LINE Anonyme Arrow Function Unknown Super",
			"h [aafReturn]: 1-LINE Anonyme Arrow Function Return",
			"shift+h [aafReturn2]: 1-LINE Anonyme Arrow Function Return (more params)",
			"ctrl+h [afneReturn]: 1-LINE Anonyme Function Expression Return",
			"// ctrl+shift+h [?????]:]: ?????]:",
			"alt+h [aafrComparison]: 1-LINE Anonyme Arrow Function Return Comparison",
			"alt+ctrl+h [aafrObject]: 1-LINE Anonyme Arrow Function Return Object",
			"alt+ctrl+shift+h [afnerObject_]: Anonyme Function Expression Return Object",
			"// alt+ctrl+shift+h [?????]: ?????",
			"----- [afnerObject]: 1-LINE Anonyme Function Expression Return Object",
			"----- [aafr_]: Anonyme Arrow Function Return",
			"----- [afner_]: Anonyme Function Expression Return",
			"----- [aafrObject_]: Anonyme Arrow Function Return Object",
			"",
			"// NORMALS",
			"l [aaf_]: 1-LINE Anonyme Arrow Function",
			"shift+l [aaf_2]: 1-LINE Anonyme Arrow Function (more args)",
			"ctrl+l [aaf_]: Anonyme Arrow Function",
			"ctrl+shift+l [afne]: Anonyme Function Expression",
			"alt+l [afv_]: 1-LINE Arrow Function Variable",
			"alt+ctrl+l [afve]: Arrow Function Variable Exported",
			"alt+ctrl+shift+l [nfe]: Named Function Exported",
			"----- [afv]: Arrow Function Variable",
			"----- [afve_]: 1-LINE Arrow Function Variable Exported",
			"----- [nfee]: 1-LINE Named Function Exported (more)",
			"----- [nf_]: 1-LINE Named Function ",
			"----- [nf]: Named Function",
			"",
			"// PATTERNS",
			"j [aafr]: IIFE arrow",
			"shift+j [aafr]: IIFE function",
			"// ctrl+j [?????]: ?????",
			"// ctrl+shift+j [?????]: ?????",
			"// alt+j [?????]: ?????",
			"// alt+ctrl+j [?????]: ?????",
			"// alt+ctrl+shift+j [?????]: ?????",
			"",
			"// SCOPED",
			"k [fn_bound]: Function Bounded",
			"// shift+k [?????]: ?????",
			"ctrl+k [fn_apply]: Function Call",
			"ctrl+shift+k [fn_apply]: Function Apply",
			"alt+k [fn_innerObj]: Inner Object Function",
			"alt+ctrl+k [fn_innerObj_SETGET]: Inner Object GETTER/SETTER Function",
			"// alt+ctrl+shift+k [?????]: ?????",
			"*/",
		],
		"description": "=SHOW ARROW-EXPRESSION FUNCTIONS ALL SHORTCUTS & DESCRIPTIONS"
	},
	"=SHOW ARROW-EXPRESSION FUNCTIONS KBSHORTCUTS LIST OPTION": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["=functionsList"],
		"body": [
			"${1|aafSUPER,aafuSUPER,aafr,aafReturn2,afneReturn,aafrComparison,aafrObject,afnerObject_,afnerObject,aafr_,afner_,aafrObject_,aaf_,aaf_2,aaf,afne,afv_,afve,nfe,afv,afve_,nfee,nf_,nf,aafr,aafr,fn_bound,fn_apply,fn_apply,fn_innerObj,fn_innerObj_SETGET|}$0"
		],
		"description": "=SHOW ARROW-EXPRESSION FUNCTIONS KBSHORTCUTS LIST OPTION"
	},
//SUPER
	"1-LINE Anonyme Arrow Function Super": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafSUPER$"],
		"body": [
		"${1|export const ,export default |}${2:${TM_SELECTED_TEXT:FUNCTION_NAME}} = ${4:async }(${5:${6:item}, ${7:i}}) => ${8|({[item[]]: item[]}),item[]|}"
		],
		"description": "1-LINE Anonyme Arrow Function Super"
	},
	"1-LINE Anonyme Arrow Function Unknown Super": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafuSUPER$"],
		"body": [
		"${1|export ,export const ,export default |}${2:${3:${TM_SELECTED_TEXT:FUNCTION_NAME}} = }${4:async }(${5:${6:item}, ${7:i}}) => ${8|({[item[]]: item[]}),item[]|}"
		],
		"description": "1-LINE Anonyme Arrow Function Unknown Super"
	},
/*
	LA DIFFÉRENCE ENTRE LES 1-LINE ET LES MULTILINE EST LÀ OÙ EST PLACÉ LE $TM_SELECTED_TEXT
	DANS MULTILINE IL DÉFINI LE CONTENU DE LA FONCTION
*/
// RETURNINGS
	"1-LINE Anonyme Arrow Function Return": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafr$"],
		"body": [
		"${1:item} => ${2:${TM_SELECTED_TEXT:$1.}}$0"
		],
		"description": "1-LINE Anonyme Arrow Function Return"
	},
	"1-LINE Anonyme Arrow Function Return (more params)": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafReturn2$"],
		"body": [
		"(${1:item},i) => ${2:${TM_SELECTED_TEXT:$1.}}$0"
		],
		"description": "1-LINE Anonyme Arrow Function Return"
	},
			"1-LINE Anonyme Function Expression Return": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["afneReturn$"],
				"body": [
				"function (${1:item},i){ return ${2:${TM_SELECTED_TEXT:$1.}}$0 }"
				],
				"description": "1-LINE Anonyme Function Expression Return"
			},
					"Anonyme Arrow Function Return": {
		"scope": ["js","jsx","tsx"],
						"prefix": ["aafr_$"],
						"body": [
							"(${1:item},i) => {",
							"\t",
							"\t${2:$TM_SELECTED_TEXT}",
							"\treturn $0;",
							"}"
						],
						"description": "Anonyme Arrow Function Return"
					},
					"Anonyme Function Expression Return": {
		"scope": ["js","jsx","tsx"],
						"prefix": ["afner_$"],
						"body": [
						"function(${1:item},i){",
						"\t",
						"\t${2:$TM_SELECTED_TEXT}",
						"\treturn $0;",
						"}"
						],
						"description": "Anonyme Function Expression Return"
					},
	"1-LINE Anonyme Arrow Function Return Object": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafrObject$"],
		"body": [
		"${1:${TM_SELECTED_TEXT:item}} => ({[${TM_SELECTED_TEXT:$1}[$2]]: ${TM_SELECTED_TEXT:$1}[$3]})$0"
		],
		"description": "1-LINE Anonyme Arrow Function Object"
	},
			"1-LINE Anonyme Function Expression Return Object": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["afnerObject$"],
				"body": [
				"function (${1:item},i){ return {[${TM_SELECTED_TEXT:$1}[$2]]: ${TM_SELECTED_TEXT:$1}[$3]}$0 }"
				],
				"description": "1-LINE Anonyme Function Expression Return Object"
			},
					"Anonyme Arrow Function Return Object": {
		"scope": ["js","jsx","tsx"],
						"prefix": ["aafrObject_$"],
						"body": [
						"(${1:${TM_SELECTED_TEXT:item}},i) => ({",
						"\t",
						"\t\t[${TM_SELECTED_TEXT:$1}[$2]]: ${TM_SELECTED_TEXT:$1}[$3]",
						"\t}",
						")$0",
						],
						"description": "1-LINE Anonyme Arrow Function Object"
					},
					"Anonyme Function Expression Return Object": {
		"scope": ["js","jsx","tsx"],
						"prefix": ["afnerObject_$"],
						"body": [
						"function (${1:item},i){", 
						"\t",
						"\treturn {[${TM_SELECTED_TEXT:$1}[$2]]: ${TM_SELECTED_TEXT:$1}[$3]}", 
						"$0 }"
						],
						"description": "1-LINE Anonyme Function Expression Return Object"
					},
	"1-LINE Anonyme Arrow Function Return Comparison": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafrComparison$"],
		"body": [
		"${1:item} => $1${2:[\"VALUE_1\"]} ${3|!=,==,!==,===,<,>,<=,>=|} $1${4:[\"VALUE_2\"]}$0"
		],
		"description": "1-LINE Anonyme Arrow Function Comparison"
	},
"1-LINE Anonyme Arrow Function Return Comparison 2": {
	"scope": ["js","jsx","tsx"],
	"prefix": ["aafrComparison2$"],
	"body": [
	"(value,index,arr) => value ${1|!=,==,!==,===,<,>,<=,>=|} ${2:0}"
	],
	"description": "1-LINE Anonyme Arrow Function Comparison2"
},
//NONE-RETURNINGS
	"1-LINE Anonyme Arrow Function": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aaf_$"],
		"body": [
		"${1:item} => { $TM_SELECTED_TEXT$0 }"
		],
		"description": "1-LINE Anonyme Arrow Function"
	},
			"Anonyme Arrow Function": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["aaf_$"],
				"body": [
				"(${1:item},i) => {",
				"\t",
				"\t${2:$TM_SELECTED_TEXT}$0",
				"}"
				],
				"description": "Anonyme Arrow Function"
			},
			"Anonyme Function Expression": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["afne$"],
				"body": [
				"function(${1:item},i){",
				"\t",
				"\t${2:$TM_SELECTED_TEXT}",
				"}"
				],
				"description": "Anonyme Function Expression"
			},
	"1-LINE Anonyme Arrow Function (more args)": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aaf_2$"],
		"body": [
		"(${1:item}, ${2:i}) => { $TM_SELECTED_TEXT$0 }",
		],
		"description": "1-LINE Anonyme Arrow Function (more args)"
	},
	"1-LINE Arrow Function Variable": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["afv_$"],
		"body": [
		"${1|let,const,var|} ${TM_SELECTED_TEXT${2:FUNC_NAME}} = (${3:item},...argRest) => { $0 }"
		],
		"description": "1-LINE Arrow Function Variable"
	},
			"Arrow Function Variable": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["afv$"],
				"body": [
				"${1|let,const,var|} ${2:FUNC_NAME} = (${3:item},...argRest) => {",
				"\t",
				"\t$TM_SELECTED_TEXT$0",
				"}"
				],
				"description": "Arrow Function Variable"
			},
	"1-LINE Arrow Function Variable Exported": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["afve_$"],
		"body": [
		"${1|export const ,export default |}${TM_SELECTED_TEXT:${2:FUNC_NAME}} = (${3:item,...argRest}) => {$0}"
		],
		"description": "1-LINE Arrow Function Variable Exported"
	},
			"1-LINE Named Function Exported": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["fee$"],
				"body": [
				"export ${1:default }function ${TM_SELECTED_TEXT:${1:FUNC_NAME}}(${2:arg1},...argRest){ return $0; }"
				],
				"description": "1-LINE Named Function Exported"
			},
			"Arrow Function Variable Exported": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["afve$"],
				"body": [
				"${1|export const ,export default }${3:FUNC_NAME} = (${4:item,...argRest}) => {",
				"\t",
				"\t$TM_SELECTED_TEXT$0",
				"}"
				],
				"description": "Arrow Function Variable Exported"
			},
			"Named Function Exported (more)": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["nfe$"],
				"body": [
				"${1|export ,export default }function ${TM_SELECTED_TEXT:${2:FUNC_NAME}}(${3:arg1,...restArgs}){",
				"\t",
				"\treturn $0;",
				"}"
				],
				"description": "Named Function Exported (more)"
			},
//FUNCTION EXPRESSION
	"1-LINE Named Function ": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["nf_$"],
		"body": [
		"function ${TM_SELECTED_TEXT:${1:FUNC_NAME}}(${2:arg1},...argRest){ return $0; }"
		],
		"description": "1-LINE Named Function"
	},
	"Named Function": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["nf$"],
		"body": [
		"function ${TM_SELECTED_TEXT:${1:FUNC_NAME}}(${2:arg1},...argRest){",
		"\t",
		"\t${2:$TM_SELECTED_TEXT}",
		"\treturn $0;",
		"}"
		],
		"description": "Named Function"
	},
//IIFE
	"IIFE arrow": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["aafr$"],
		"body": [
		"((${1:item}) => {",
		"\t",
		"\t${2:${TM_SELECTED_TEXT:$1.}}",
		"})($0)",
		],
		"description": "IIFE arrow"
	},
			"IIFE function": {
		"scope": ["js","jsx","tsx"],
				"prefix": ["aafr$"],
				"body": [
				"(function(${1:item}){",
				"\t",
				"\t${2:${TM_SELECTED_TEXT:$1.}}",
				"})($0)",
				],
				"description": "IIFE arrow"
			},
//
//call() & apply() vs bind()?: https://stackoverflow.com/questions/15455009/javascript-call-apply-vs-bind
//call attaches this into function and executes the function immediately
//apply is similar to call except that it takes an array-like object instead of listing the arguments out one at a time
//Use .bind() when you want that function to later be called with a certain context, useful in events.
//Call/apply call the function immediately, whereas bind returns a function that, when later executed, will have the correct context set for calling the original function.


	"Function Bounded": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["fn_bound$"],
		"body": [
		"let ${1:FUNC_BOUNDED_NAME} = ${TM_SELECTED_TEXT:$2}.bind(${3:${TM_SELECTED_TEXT:THIS_OBJECT_TO_BIND}}, ${3:...${TM_SELECTED_TEXT:AN_ARRAY-LIKE_HERE}})",
		],
		"description": "Function Bounded"
	},
	"Function Apply": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["fn_apply$"],
		"body": [
		"${TM_SELECTED_TEXT:$1}.apply(${2:${TM_SELECTED_TEXT:THIS_OBJECT_TO_BIND}}, ${3:${TM_SELECTED_TEXT:AN_ARRAY-LIKE_HERE}})",
		],
		"description": "Function Apply"
	},
	"Function Call": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["fn_apply$"],
		"body": [
		"${TM_SELECTED_TEXT:$1}.call(${2:${TM_SELECTED_TEXT:THIS_OBJECT_TO_BIND}}, ${3:...${TM_SELECTED_TEXT:AN_ARRAY-LIKE_HERE}})",
		],
		"description": "Function Call"
	},
	"Inner Object Function": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["fn_innerObj$"],
		"body": [
		"${1:${TM_SELECTED_TEXT:OBJECT_PROPERTY_NAME}}: ${2|() => {}, function(){}|}",
		],
		"description": "Inner Object Function"
	},
	"Inner Object GETTER/SETTER Function": {
		"scope": ["js","jsx","tsx"],
		"prefix": ["fn_innerObj_SETGET$"],
		"body": [
		"${1|get,set|} ${2:${TM_SELECTED_TEXT:OBJECT_PROPERTY_NAME}}: ${3|(arg) => {}, function(arg){}|}",
		],
		"description": "Inner Object GETTER/SETTER Function"
	},
}