{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// CLASSES DEFINITIONS
	"Classes Definition": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class",
		"body": [
			"${1:export default }class ${TM_SELECTED_TEXT:${2:MaClass}} ${3:extends ${4:ParentClass} }{",
			"\t// Public field declarations",
			"\t// publicField = 0;",
			"\t// Public Static field declarations",
			"\t// static staticField = 0;",
			"\t// Private field declarations",
			"\t// #privateField = 0;",
			"\t// Private Static field declarations",
			"\t// static #privateStaticField = 0;",
			"\tconstructor(${5:props}) {",
			"\t\t// super()",
			"\t\t$5 && Object.assign(this,$5)",
			"\t\tconsole.log(this)",
			"\t}",
			"\t${6:class_method //ctrl+alt+c l}",
			"\t${7:\r\n\t${8:class_methodStatic //ctrl+alt+c k}\r\n\t${9:class_methodPrivate //ctrl+alt+c h}\r\n\t${10:class_methodPrivateStatic //ctrl+alt+c shift+k}\r\n\t${11:class_setter //ctrl+alt+c shift+j}\r\n\t${12:class_getter //ctrl+alt+c j}\r\n\t${13:class_generator //ctrl+alt+c g}}",
			"\t$0",
			"}",
			"// const ${98:chose} = new $2($99)"
		],
		"description": "Créer une class JS comprenant toutes les fonctionnalités des classes JS"
	},
	"Classes Methode": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class_method",
		"body": [
			"${TM_SELECTED_TEXT:${1:MaMethode}}(${2:param}) {",
			"\t$2$0",
			"}"
		],
		"description": "Créer une méthode dans votre class JS"
	},
	"Classes Methode Static": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class_method",
		"body": [
			"static ${TM_SELECTED_TEXT:${1:MaMethode}}(${2:param}) {",
			"\t$0",
			"}"
		],
		"description": "Créer une méthode STATIC dans votre class JS"
	},
	"Classes Methode Private": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class_method",
		"body": [
			"#${TM_SELECTED_TEXT:${1:MaMethodePrivee}}(${2:param}) {",
			"\t$0",
			"}"
		],
		"description": "Créer une méthode PRIVATE dans votre class JS"
	},
	"Classes Methode Private Static": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class_method",
		"body": [
			"static #${TM_SELECTED_TEXT:${1:MaMethodePriveeStatic}}(${2:param}) {",
			"\t$0",
			"}"
		],
		"description": "Créer une méthode PRIVATE STATIC dans votre class JS"
	},
	"Classes GETTER": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class_method",
		"body": [
			"\tget _${TM_SELECTED_TEXT:${1:prop}}() {",
			"\t\treturn this.$1 $0",
			"\t}",
		],
		"description": "Créer un GETTER dans votre class JS"
	},
	"Classes SETTER": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class_method",
		"body": [
			"\tset _${TM_SELECTED_TEXT:${1:prop}}(${2:param}) {",
			"\t\tthis.prop = $2 $0",
			"\t}",
		],
		"description": "Créer un SETTER dans votre class JS"
	},
	"Classes Generator": {
		"scope": [
			"js",
			"jsx",
			"tsx"
		],
		"prefix": "_class_method",
		"body": [
			"*${TM_SELECTED_TEXT:${1:MaMethodeGenerator}}(${2:param}) {",
			"\tfor (const side of this.sides) {",
			"\t\tyield side;",
			"\t} $0",
			"}"
		],
		"description": "Créer une méthode GENERATOR dans votre class JS"
	}
}